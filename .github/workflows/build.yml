name: Build APK for Kotlin Android App
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Basic checkout using git commands
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.ref_name }}
      
      # Setup Java manually
      - name: Set up JDK
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk
          java -version
      
      # Create a new gradlew script
      - name: Create build script
        run: |
          sudo apt-get install -y gradle
          echo '#!/bin/bash' > ./build-with-gradle.sh
          echo 'gradle "$@"' >> ./build-with-gradle.sh
          chmod +x ./build-with-gradle.sh
      
      # List available Gradle tasks
      - name: List available tasks
        run: |
          ./build-with-gradle.sh tasks
          echo "=== Project structure ==="
          find . -name "*.gradle" | sort
          echo "=== Build.gradle content ==="
          cat build.gradle || echo "No build.gradle found"
      
      # Try different build tasks
      - name: Build project
        run: |
          # Try standard Android task first
          ./build-with-gradle.sh build --info || echo "Build task failed, trying other tasks"
          
          # If that fails, try other common tasks
          if [ $? -ne 0 ]; then
            echo "Trying jar task..."
            ./build-with-gradle.sh jar --info || echo "Jar task failed"
          fi
        env:
          API_KEY: ${{ secrets.API_KEY }}
          
      # Debug - list all output files
      - name: Find output files
        run: |
          echo "=== APK files ==="
          find . -name "*.apk" || echo "No APK files found"
          echo "=== JAR files ==="
          find . -name "*.jar" -not -path "*/gradle/*" || echo "No JAR files found"
          echo "=== All build outputs ==="
          find . -path "*/build/*" -type f -name "*.jar" -o -name "*.apk" -o -name "*.aar" || echo "No build outputs found"
          
      # Create a release tag (if on main branch)
      - name: Create Release Tag
        if: github.ref == 'refs/heads/main' && success()
        run: |
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "release-$BUILD_NUMBER" -m "Release build $BUILD_NUMBER"
          git push origin "release-$BUILD_NUMBER"
